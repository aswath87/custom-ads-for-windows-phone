using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Xml.Linq;
using Microsoft.Phone.Controls;
using Microsoft.Phone.Tasks;

namespace ProjectManhattan
{
    public partial class MainPage : PhoneApplicationPage
    {
        private CustomAdClient _adClient; 
        private DateTime _previousAdSwitchTime = DateTime.Now;
        private AdImageUnit _adImageUnit; 
    
        // Constructor
        //
        public MainPage()
        {
            InitializeComponent();

            CustomAdClient _adClient = new CustomAdClient(AppName, new Uri(@"https://dl-web.dropbox.com/get/Public/adServer2.txt?w=9fd5ede2", false));
            
            // Update ad config 
            //
            Dispatcher.BeginInvoke(() =>
            {
                _adClient.UpdateAdConfig();
            }
            );

            UpdateAd();
        }
            
        /// <summary>
        /// Updates the ad 
        /// </summary>
        /// <param name="force">Forces ad from ad list</param>
        public void UpdateAd(bool forceUpdate = false)
        {
            try
            {
                bool timeElapsed = (DateTime.Now - _previousAdSwitchTime).TotalMinutes > 1;
                
                // update ad only if current ad has been shown for over a minute  
                //
                bool updateAd = timeElapsed || forceUpdate; 
                if (updateAd)
                {
                    // select a random ad specified in the config 
                    //
                    AdImageUnit adImageUnit = _adClient.SelectAd(force);
                    
                    // adImage is null if 
                    if (adImageUnit != null)
                    {
                        bool isAdImageSet = false;
    
                        // set Adimage UI control to the selected ad image 
                        //
                        if (adImage != null)
                        {
                            AdImage.Source = adImageUnit.AdImage();
                            isAdImageSet = true;
                        }
    
                        // fall back to use image uri if the image hasn't been downloaded to isolated storage 
                        //
                        else if (!String.IsNullOrEmpty(adImageUnit.image_uri))
                        {
                            AdImage.Source = new BitmapImage(new Uri(adImageUnit.image_uri, UriKind.RelativeOrAbsolute));
                            isAdImageSet = true;
                        }
                     }
    
                     // If customAd image was successfully set in the AdImage control, collapse any other ad control and make adImage visible 
                     //
                     if (isAdImageSet)
                     {
                        AdImage.Visibility = Visibility.Visible;
                        adControl.Visibility = Visibility.Collapsed;
                        _adImageUnit = adImageUnit;
                        _previousAdSwitchTime = DateTime.Now;
                     }
                     else
                     {
                        AdImage.Visibility = Visibility.Collapsed;
                        adControl.Visibility = Visibility.Visible;
                        _adImageUnit = null;
                     }
                }
            }
    
            catch // this has to be fixed. for now, it's better to catch all exceptions and collapse AdImage
            {
                AdImage.Visibility = Visibility.Collapsed;
                adControl.Visibility = Visibility.Visible;
                _adImageUnit = null;
            }
        }
    }      
}